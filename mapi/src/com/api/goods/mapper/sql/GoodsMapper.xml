<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.api.goods.mapper.GoodsMapper">
	<insert id="insertBrand" useGeneratedKeys="true" keyProperty="brand_id" parameterType="com.api.goods.entity.Brand">
	    insert into brand(brand_name,account_id,brand_from,brand_shortname,create_time,update_time) values (#{brand_name},#{account_id},#{brand_from},#{brand_name},now(),now());
	</insert>
	
	<select id="countBrand" parameterType="com.api.goods.entity.Brand" resultType="int">
		select count(*) from brand where state = 1 and brand_name = #{brand_name} and account_id = #{account_id} 
		<if test="brand_id != null">
			and brand_id != #{brand_id} 
		</if> 
    </select>
    
    <update id="updateBrand" parameterType="com.api.goods.entity.Brand">
		update brand set brand_name = #{brand_name},update_time = now() where state = 1 and brand_id = #{brand_id} 
	</update>
	
	<update id="updateThresholdCount" parameterType="Integer">
	    update brand b set b.threshold_count = (select count(*) from goods g where g.state = 1 and g.brand_id = #{brand_id} and g.goods_stock &lt; g.goods_threshold),b.update_time = now() where b.state = 1 and b.brand_id = #{brand_id} 
	</update>
	
	<update id="incBrandGoodsCount" parameterType="Integer">
		update brand set goods_count = goods_count + 1,update_time = now() where state = 1 and brand_id = #{brand_id}  
	</update>
	
	<update id="incBrandImagesCount" parameterType="Integer">
		update brand set images_count = images_count + 1,update_time = now() where state = 1 and brand_id = #{brand_id}  
	</update>
	
	<update id="decBrandGoodsCount" parameterType="Integer">
		update brand set goods_count = goods_count - 1,update_time = now() where state = 1 and brand_id = #{brand_id} 
	</update>
	
	<update id="decBrandImagesCount" parameterType="Integer">
		update brand set images_count = images_count - 1,update_time = now() where state = 1 and brand_id = #{brand_id} 
	</update>
	
	<select id="queryBrandById" parameterType="com.api.goods.entity.Brand" resultType="string">
		select brand_name from brand where state = 1 and brand_id = #{brand_id} and account_id = #{account_id} 
	</select>
	
	<select id="queryBrandNameById" parameterType="Integer" resultType="string">
		select brand_name from brand where state = 1 and brand_id = #{brand_id} 
	</select>
	
	<select id="queryBrandName" parameterType="Integer" resultType="com.api.goods.entity.BrandAndAgentLevel">
		select brand_id,brand_name,threshold_count,brand_from,brand_index,account_id from brand where state = 1 and account_id = #{account_id} order by brand_index,brand_id desc
	</select>
	
	<select id="queryBrandNameAndGoodsCount" parameterType="Integer" resultType="com.api.goods.entity.BrandAndAgentLevel">
		select brand_id,brand_name,goods_count,threshold_count,brand_from,brand_index,account_id from brand where state = 1 and account_id = #{account_id} order by brand_index,brand_id desc
	</select>
	
	<select id="queryBrandNameAndImagesCount" parameterType="Integer" resultType="com.api.goods.entity.BrandAndAgentLevel">
		select brand_id,brand_name,images_count,threshold_count,brand_from,brand_index,account_id from brand where state = 1 and account_id = #{account_id} order by brand_index,brand_id desc
	</select>
	
	<select id="queryBrandByName" parameterType="com.api.goods.entity.Brand" resultType="com.api.goods.entity.BrandAndAgentLevel">
		select brand_id,brand_name,goods_count,threshold_count,brand_from,brand_index,account_id from brand 
		where state = 1 and account_id = 0 and brand_shortname like CONCAT('%|',#{brand_name},'|%') and brand_id not in (select brand_from from brand where state = 1 and account_id = #{account_id} and brand_from &gt; 0)
		union all 
		select brand_id,brand_name,goods_count,threshold_count,brand_from,brand_index,account_id from brand 
		where state = 1 and account_id = #{account_id} and brand_from in (select brand_id from brand where state = 1 and account_id = 0 and brand_shortname like CONCAT('%|',#{brand_name},'|%'))
		union all 
		select brand_id,brand_name,goods_count,threshold_count,brand_from,brand_index,account_id from brand where state = 1 and brand_from &lt;=0 and account_id = #{account_id} and brand_shortname like CONCAT('%',#{brand_name},'%') 
	</select>
	
	<select id="listPageRecommendBrand" parameterType="com.api.goods.entity.ListPageRecommendBrand" resultType="com.api.goods.entity.BrandRecommend">
		select b.brand_id,b.brand_name,b.goods_count,bp.brand_price,
		(select count(*) from brand br
			where br.brand_from = b.brand_id
			and br.account_id = #{account_id}) isdownload
		from brand b,brandprice bp where b.brand_id = bp.brand_id and b.account_id = 0 and b.state = 1 and bp.state = 1 order by isdownload,b.brand_id
	</select>
	
	<select id="queryRecommendBrand" parameterType="com.api.goods.entity.Brand" resultType="com.api.goods.entity.BrandRecommend">
		select b.brand_id,b.brand_name,b.goods_count,bp.brand_price,b.stock_remind,b.is_hot,b.brand_info,b.logo_url,b.title,
		(select count(*) from brand br where br.brand_from = b.brand_id
			and br.account_id = #{account_id})
		isdownload from brand b,brandprice bp
		where b.brand_id = bp.brand_id and b.account_id = 0 and b.state = 1 and bp.state = 1 and b.brand_id = #{brand_id}
	</select>
	
	<select id="checkRecommendBrand" parameterType="com.api.goods.entity.Brand" resultType="int">
		select count(*) from brand where state = 1 and account_id = #{account_id} and brand_from = #{brand_from} 
	</select>
	
	<update id="deleteBrand" parameterType="com.api.goods.entity.Brand">
		update brand set state = 0,update_time = now() where state = 1 and brand_id = #{brand_id} and account_id = #{account_id} 
	</update>
	
	<insert id="insertBrandImages" useGeneratedKeys="true" keyProperty="brandimages_id" parameterType="com.api.goods.entity.BrandImages">
	    insert into brandimages(brandimages_url,brand_id,account_id,create_time,update_time) values (#{brandimages_url},#{brand_id},#{account_id},now(),now());
	</insert>
	
	<update id="deleteBrandImages" parameterType="com.api.goods.entity.BrandImages">
		update brandimages set state = 0,update_time = now() where state = 1 and account_id = #{account_id} 
		<if test="brandimages_id != null">
			and brandimages_id = #{brandimages_id} 
		</if>
		<if test="brand_id != null">
			and brand_id = #{brand_id} 
		</if> 
	</update>
	
	<select id="queryBrandImages" parameterType="com.api.goods.entity.Brand" resultType="com.api.goods.entity.BrandImagesResult">
		select brandimages_id,brandimages_url from brandimages where state = 1 and account_id = #{account_id} and brand_id = #{brand_id} order by brandimages_id 
	</select>
    
	<insert id="insertAgentLevel" useGeneratedKeys="true" keyProperty="agentlevel_id" parameterType="com.api.goods.entity.AgentLevel">
	    insert into agentlevel(agentlevel_name,agentlevel_default,brand_id,account_id,create_time,update_time) values (#{agentlevel_name},#{agentlevel_default},#{brand_id},#{account_id},now(),now());
	</insert>
	
	<select id="countAgentLevel" parameterType="com.api.goods.entity.AgentLevel" resultType="int">
		select count(*) from agentlevel where state = 1 and agentlevel_name = #{agentlevel_name} and account_id = #{account_id} and brand_id = #{brand_id} 
		<if test="agentlevel_id != null">
			and agentlevel_id != #{agentlevel_id} 
		</if> 
    </select>
    
    <update id="updateAgentLevel" parameterType="com.api.goods.entity.AgentLevel">
		update agentlevel set agentlevel_name = #{agentlevel_name},update_time = now() where state = 1 and agentlevel_id = #{agentlevel_id} and brand_id = #{brand_id} and account_id = #{account_id} 
	</update>
	
	<select id="queryAgentLevelById" parameterType="com.api.goods.entity.AgentLevel" resultType="string">
		select agentlevel_name from agentlevel where state = 1 and agentlevel_id = #{agentlevel_id} and brand_id = #{brand_id} and account_id = #{account_id} 
	</select>
	
	<select id="queryAgentLevel" parameterType="com.api.goods.entity.Brand" resultType="com.api.goods.entity.AgentLevel">
		select agentlevel_id,agentlevel_name,agentlevel_default,agentlevel_index from agentlevel where state = 1 and brand_id = #{brand_id} and account_id = #{account_id} order by agentlevel_index,agentlevel_id desc
	</select>
	
	<update id="deleteAgentLevel" parameterType="com.api.goods.entity.AgentLevel">
		update agentlevel set state = 0,update_time = now() where state = 1 and account_id = #{account_id} 
		<if test="agentlevel_id != null">
			and agentlevel_id = #{agentlevel_id} 
		</if>
		<if test="brand_id != null">
			and brand_id = #{brand_id} 
		</if> 
	</update>
	
	<insert id="insertGoods" useGeneratedKeys="true" keyProperty="goods_id" parameterType="com.api.goods.entity.Goods">
	    insert into goods(goods_name,goods_price,brand_id,goods_scale,account_id,create_time,update_time) values (#{goods_name},#{goods_price},#{brand_id},#{goods_scale},#{account_id},now(),now());
	</insert>
	
	<select id="countGoods" parameterType="com.api.goods.entity.Goods" resultType="int">
		select count(*) from goods where state = 1 and account_id = #{account_id} 
		<if test="goods_name != null and goods_name != ''">
			and goods_name = #{goods_name} 
		</if>
		<if test="goods_id != null">
			and goods_id != #{goods_id} 
		</if> 
		<if test="brand_id != null">
			and brand_id = #{brand_id} 
		</if> 
    </select>
    
	<update id="updateGoods" parameterType="com.api.goods.entity.Goods">
		update goods set goods_name = #{goods_name},goods_price = #{goods_price},update_time = now() where state = 1 and goods_id = #{goods_id} and account_id = #{account_id}  
	</update>
	
	<update id="updateGoodsStock" parameterType="com.api.goods.entity.GoodsStock">
		update goods set goods_stock = goods_stock+#{goods_stock},update_time = now() where state = 1 and goods_id = #{goods_id} and account_id = #{account_id}  
	</update>
	
	<update id="updateSetGoodsStock" parameterType="com.api.goods.entity.GoodsStock">
		update goods set goods_stock = goods_stock+#{goods_stock},goods_setstock = 1,update_time = now() where state = 1 and goods_id = #{goods_id} and account_id = #{account_id}  
	</update>
	
	<update id="updateGoodsThreshold" parameterType="com.api.goods.entity.Goods">
		update goods set goods_threshold = #{goods_threshold},update_time = now() where state = 1 and goods_id = #{goods_id} and account_id = #{account_id} and brand_id = #{brand_id} 
	</update>
	
	<update id="updateAllGoodsThreshold">
		update goods set goods_threshold = #{goodsthreshold},update_time = now() where state = 1 and account_id = #{account_id} 
	</update>
	
	<update id="updateGoodsScale" parameterType="com.api.goods.entity.Goods">
		update goods set goods_scale = #{goods_scale},update_time = now() where state = 1 and goods_id = #{goods_id} and account_id = #{account_id} and brand_id = #{brand_id} 
	</update>
	
	<select id="queryGoodsStock" parameterType="com.api.goods.entity.GoodsStock" resultType="com.api.goods.entity.Goods">
		select goods_name,goods_stock,goods_threshold from goods where state = 1 and goods_id = #{goods_id} and account_id = #{account_id} 
	</select>
	
	<select id="queryGoodsById" parameterType="com.api.goods.entity.Goods" resultType="com.api.goods.entity.Goods">
		select goods_name,goods_price,goods_stock,goods_threshold,goods_scale from goods where state = 1 and goods_id = #{goods_id} and account_id = #{account_id} and brand_id = #{brand_id} 
	</select>
	
	<select id="checkGoodsScale" parameterType="com.api.goods.entity.Brand" resultType="int">
		select count(*) from goods where state = 1 and account_id = #{account_id} and brand_id = #{brand_id} and goods_scale &gt; 0
	</select>
	
	<update id="deleteGoods" parameterType="com.api.goods.entity.Goods">
		update goods set state = 0,update_time = now() where state = 1 and account_id = #{account_id} 
		<if test="goods_id != null">
			and goods_id = #{goods_id} 
		</if>
		<if test="brand_id != null">
			and brand_id = #{brand_id} 
		</if> 
	</update>
	
	<select id="queryGoods" parameterType="com.api.goods.entity.Brand" resultType="com.api.goods.entity.GoodsAndGoodsPrice">
		select goods_id,goods_name,goods_price,goods_stock,goods_threshold,goods_scale,goods_index from goods where state = 1 and account_id = #{account_id} and brand_id = #{brand_id} order by goods_index,goods_id
	</select>
	
	<select id="queryGoodsList" parameterType="com.api.goods.entity.Brand" resultType="com.api.goods.entity.Goods">
		select goods_id,goods_name,goods_price,goods_stock,goods_threshold,goods_scale,goods_index,
		 goods_setstock,img_url,download_price,goods_unit
		 from goods where state = 1 and account_id = #{account_id} and brand_id = #{brand_id} order by goods_index,goods_id
	</select>
	
	<select id="queryGoodsStockList" parameterType="Integer" resultType="com.api.goods.entity.GoodsAndGoodsStock">
		select g.goods_id,g.goods_name,g.goods_price,g.goods_stock,g.goods_threshold,g.goods_scale,g.brand_id,b.brand_name from goods g,brand b where g.brand_id = b.brand_id and g.state = 1 and b.state = 1 and g.goods_setstock = 0 and g.account_id = #{account_id} order by g.brand_id,g.goods_index,g.goods_id
	</select>
	
	<select id="queryGoodsAllNoStockList" parameterType="Integer" resultType="com.api.goods.entity.GoodsAndGoodsStock">
		select g.goods_id,g.goods_name,g.goods_price,g.goods_stock,g.goods_threshold,g.goods_scale,g.brand_id,b.brand_name from goods g,brand b where g.brand_id = b.brand_id and g.state = 1 and b.state = 1 and g.goods_stock &lt; g.goods_threshold and g.account_id = #{account_id} order by g.brand_id,g.goods_index,g.goods_id
	</select>
	
	<select id="queryGoodsNoStockList" resultType="com.api.goods.entity.GoodsAndGoodsStock">
		select g.goods_id,g.goods_name,g.goods_price,g.goods_stock,g.goods_threshold,g.goods_scale,g.brand_id,b.brand_name from goods g,brand b where g.brand_id = b.brand_id and g.state = 1 and b.state = 1 and g.goods_stock &lt; g.goods_threshold and g.account_id = #{account_id} and g.brand_id = #{brand_id} order by g.brand_id,g.goods_index,g.goods_id
	</select>
	
	<select id="queryGoodsAllHasStockList" parameterType="Integer" resultType="com.api.goods.entity.GoodsAndGoodsStock">
		select g.goods_id,g.goods_name,g.goods_price,g.goods_stock,g.goods_threshold,g.goods_scale,g.brand_id,b.brand_name from goods g,brand b where g.brand_id = b.brand_id and g.state = 1 and b.state = 1 and g.goods_stock &gt; 0 and g.account_id = #{account_id} order by g.brand_id,g.goods_index,g.goods_id
	</select>
	
	<select id="queryGoodsHasStockList" resultType="com.api.goods.entity.GoodsAndGoodsStock">
		select g.goods_id,g.goods_name,g.goods_price,g.goods_stock,g.goods_threshold,g.goods_scale,g.brand_id,b.brand_name from goods g,brand b where g.brand_id = b.brand_id and g.state = 1 and b.state = 1 and g.goods_stock &gt; 0 and g.account_id = #{account_id} and g.brand_id = #{brand_id} order by g.brand_id,g.goods_index,g.goods_id
	</select>
	
	<select id="queryGoodsAllAllStockList" parameterType="Integer" resultType="com.api.goods.entity.GoodsAndGoodsStock">
		select g.goods_id,g.goods_name,g.goods_price,g.goods_stock,g.goods_threshold,g.goods_scale,g.brand_id,b.brand_name from goods g,brand b where g.brand_id = b.brand_id and g.state = 1 and b.state = 1 and g.account_id = #{account_id} order by g.brand_id,g.goods_index,g.goods_id
	</select>
	
	<select id="queryGoodsAllStockList" resultType="com.api.goods.entity.GoodsAndGoodsStock">
		select g.goods_id,g.goods_name,g.goods_price,g.goods_stock,g.goods_threshold,g.goods_scale,g.brand_id,b.brand_name from goods g,brand b where g.brand_id = b.brand_id and g.state = 1 and b.state = 1 and g.account_id = #{account_id} and g.brand_id = #{brand_id} order by g.brand_id,g.goods_index,g.goods_id
	</select>
	
	<select id="queryGoodsTotalMoney" parameterType="Integer" resultType="Float">
		select COALESCE(sum(goods_price*goods_stock),0) from goods where state = 1 and account_id = #{account_id} and goods_stock &gt; 0 
	</select>
	
	<select id="queryGoodsTotal" parameterType="Integer" resultType="int">
		select COALESCE(sum(goods_stock),0) from goods where state = 1 and account_id = #{account_id} and goods_stock &gt; 0 
	</select>
	
	<select id="queryGoodsNoStockTotal" parameterType="Integer" resultType="int">
		select count(*) from goods where state = 1 and account_id = #{account_id} and goods_stock &lt; goods_threshold 
	</select>
	
	<select id="queryGoodsSetStockTotal" parameterType="Integer" resultType="int">
		select count(*) from goods where state = 1 and account_id = #{account_id} and goods_setstock = 1 
	</select>
	
	<insert id="insertGoodsStockTotal" useGeneratedKeys="true" keyProperty="total_id" parameterType="com.api.goods.entity.GoodsStockTotal">
	    insert into goodsstocktotal(total_type,account_id,create_time,update_time) values (#{total_type},#{account_id},now(),now());
	</insert>
	
	<insert id="insertGoodsStock" useGeneratedKeys="true" keyProperty="goodsstock_id" parameterType="com.api.goods.entity.GoodsStock">
	    insert into goodsstock(goods_id,goods_stock,old_stock,new_stock,total_id,account_id,create_time,update_time,state) values (#{goods_id},#{goods_stock},#{old_stock},#{new_stock},#{total_id},#{account_id},now(),now(),#{state});
	</insert>
	
	<update id="updateGoodsStockState" parameterType="com.api.goods.entity.GoodsStock">
		update goodsstock set state = 1 where goods_id = #{goods_id} and account_id = #{account_id} 
	</update>
	
	<select id="checkGoodsStock" parameterType="com.api.goods.entity.GoodsStock" resultType="int">
		select count(*) from goodsstock where state = #{state} and goods_id = #{goods_id} and account_id = #{account_id} 
	</select>
	
	<select id="queryGoodsTypeStockList" resultType="com.api.goods.entity.GoodsStockList">
	    select tt.goods_id,tt.goods_name,tt.goods_price,tt.goods_threshold,tt.goods_scale,tt.total_id,tt.goods_stock,tt.create_time,tt.brand_id,b.brand_name from brand b,
	    (select g.goods_id,g.goods_name,g.goods_price,g.goods_threshold,g.goods_scale,g.brand_id,t.total_id,t.goods_stock,t.create_time from goods g,
	    (select gs.goods_id,gs.total_id,gs.goods_stock,gs.create_time from goodsstock gs,goodsstocktotal gst where gs.total_id = gst.total_id and gs.account_id = #{account_id} and gst.total_type = #{type} and date_format(gs.create_time, '%Y%m') = #{time}) t 
		where g.goods_id = t.goods_id and g.state = 1) tt 
		where b.brand_id = tt.brand_id and b.state = 1 
		order by tt.create_time 
	</select>
	
	<insert id="insertGoodsPrice" useGeneratedKeys="true" keyProperty="goodsprice_id" parameterType="com.api.goods.entity.GoodsPrice">
	    insert into goodsprice(goods_id,agentlevel_id,goods_price,account_id,create_time,update_time) values (#{goods_id},#{agentlevel_id},#{goods_price},#{account_id},now(),now());
	</insert>
	
	<select id="countGoodsPrice" parameterType="com.api.goods.entity.GoodsPrice" resultType="int">
		select count(*) from goodsprice where state = 1 and account_id = #{account_id} 
		<if test="goods_id != null">
			and goods_id = #{goods_id} 
		</if>
		<if test="agentlevel_id != null">
			and agentlevel_id = #{agentlevel_id} 
		</if> 
		<if test="goods_price != null">
			and goods_price = #{goods_price} 
		</if> 
    </select>
	
	<update id="updateGoodsPrice" parameterType="com.api.goods.entity.GoodsPrice">
		update goodsprice set goods_price = #{goods_price},update_time = now() where goods_id = #{goods_id} and agentlevel_id = #{agentlevel_id} and account_id = #{account_id} and state = 1 
	</update>
	
	<select id="queryGoodsPriceById" parameterType="com.api.goods.entity.GoodsPrice" resultType="com.api.goods.entity.GoodsPrice">
		select goodsprice_id,goods_price from goodsprice where state = 1 and goods_id = #{goods_id} and agentlevel_id = #{agentlevel_id} and account_id = #{account_id} 
	</select>
	
	<select id="queryGoodsPrice" parameterType="com.api.goods.entity.Goods" resultType="com.api.goods.entity.GoodsPriceResult">
		select gp.goodsprice_id,gp.goods_price,al.agentlevel_id,al.agentlevel_name,al.agentlevel_default,al.agentlevel_index from goodsprice gp,agentlevel al where gp.agentlevel_id = al.agentlevel_id and gp.state = 1 and al.state = 1 and gp.goods_id = #{goods_id} and gp.account_id = #{account_id} and al.brand_id = #{brand_id} order by al.agentlevel_index,al.agentlevel_id desc
	</select>
	
	<select id="queryGoodsAgentLevelPrice" parameterType="com.api.goods.entity.GoodsPriceQuery" resultType="com.api.goods.entity.GoodsAgentLevelPrice">
		select g.goods_id,g.goods_name,g.goods_price as goods_costprice,gp.goodsprice_id,gp.goods_price from goods g,goodsprice gp where g.goods_id = gp.goods_id and g.state = 1 and gp.state = 1 and g.brand_id = #{brand_id} and gp.agentlevel_id = #{agentlevel_id} and g.account_id = #{account_id} order by g.goods_index,g.goods_id
	</select>
	
	<select id="queryDefaultGoodsPrice" parameterType="com.api.goods.entity.GoodsPriceQuery" resultType="com.api.goods.entity.GoodsAgentLevelPrice">
		select g.goods_id,g.goods_name,g.goods_price as goods_costprice,0 as goodsprice_id,g.goods_price as goods_price from goods g where g.state = 1 and g.brand_id = #{brand_id} and g.account_id = #{account_id} order by g.goods_index,g.goods_id
	</select>
	
	<update id="deleteGoodsPrice" parameterType="com.api.goods.entity.GoodsPrice">
		update goodsprice set state = 0,update_time = now() where state = 1 and account_id = #{account_id} 
		<if test="goodsprice_id != null">
			and goodsprice_id = #{goodsprice_id} 
		</if>
		<if test="agentlevel_id != null">
			and agentlevel_id = #{agentlevel_id} 
		</if>
		<if test="goods_id != null">
			and goods_id = #{goods_id} 
		</if> 
	</update>
	
	<select id="queryBrandPrice" parameterType="Integer" resultType="com.api.goods.entity.BrandPrice">
		select brandprice_id,brand_price from brandprice where state = 1 and brand_id = #{brand_id} 
	</select>
	
	<update id="changeBrandIndex">
		update brand set brand_index = #{index},update_time = now() where state = 1 and account_id = #{aid} and brand_id = #{id} 
	</update>
	
	<update id="changeAgentLevelIndex">
		update agentlevel set agentlevel_index = #{index},update_time = now() where state = 1 and account_id = #{aid} and brand_id = #{bid} and agentlevel_id = #{id} 
	</update>
	
	<update id="changeGoodsIndex">
		update goods set goods_index = #{index},update_time = now() where state = 1 and account_id = #{aid} and brand_id = #{bid} and goods_id = #{id} 
	</update>
	
	<insert id="insertShare" useGeneratedKeys="true" keyProperty="share_id" parameterType="com.api.goods.entity.Share">
	    insert into share(account_id,create_time,update_time) values (#{account_id},now(),now());
	</insert>
	
	<insert id="insertShareBrand" useGeneratedKeys="true" keyProperty="sharebrand_id" parameterType="com.api.goods.entity.ShareBrand">
	    insert into share_brand(share_id,brand_id,account_id,create_time,update_time) values (#{share_id},#{brand_id},#{account_id},now(),now());
	</insert>
	
	<insert id="insertShareAgentLevel" useGeneratedKeys="true" keyProperty="shareagentlevel_id" parameterType="com.api.goods.entity.ShareAgentLevel">
	    insert into share_agentlevel(sharebrand_id,agentlevel_id,account_id,create_time,update_time) values (#{sharebrand_id},#{agentlevel_id},#{account_id},now(),now());
	</insert>
	
	<insert id="insertShareUse" useGeneratedKeys="true" keyProperty="shareuse_id" parameterType="com.api.goods.entity.ShareUse">
	    insert into share_use(share_id,account_id,create_time,update_time) values (#{share_id},#{account_id},now(),now());
	</insert>
	
	<select id="queryShare" parameterType="Integer" resultType="Integer">
	    select account_id from share where state = 1 and share_id = #{share_id}
	</select>
	
	<select id="queryShareBrand" parameterType="Integer" resultType="com.api.goods.entity.ShareQueryBrand">
	    select sb.sharebrand_id,sb.share_id,sb.brand_id,sb.account_id,b.brand_name,b.goods_count from share_brand sb,brand b where sb.brand_id = b.brand_id and sb.state = 1 and b.state = 1 and sb.share_id = #{share_id} order by sb.sharebrand_id 
	</select>
	
	<select id="queryOneShareBrand" resultType="com.api.goods.entity.ShareQueryBrand">
	    select sb.sharebrand_id,sb.share_id,sb.brand_id,sb.account_id,b.brand_name,b.goods_count from share_brand sb,brand b where sb.brand_id = b.brand_id and sb.state = 1 and b.state = 1 and sb.share_id = #{share_id} and sb.brand_id = #{brand_id} order by sb.sharebrand_id 
	</select>
	
	<select id="queryShareAgentLevel" parameterType="Integer" resultType="com.api.goods.entity.ShareQueryAgentLevel">
	    select sa.shareagentlevel_id,sa.agentlevel_id,a.agentlevel_name from share_agentlevel sa,agentlevel a where sa.agentlevel_id = a.agentlevel_id and sa.state = 1 and a.state = 1 and sa.sharebrand_id = #{sharebrand_id} order by sa.shareagentlevel_id
	</select>
	
	<select id="queryShareAgentLevelByShare" resultType="com.api.goods.entity.ShareQueryAgentLevel">
	    select sa.shareagentlevel_id,sa.agentlevel_id,a.agentlevel_name from share_agentlevel sa,agentlevel a where sa.agentlevel_id = a.agentlevel_id and sa.state = 1 and a.state = 1 and sa.sharebrand_id in (select sb.sharebrand_id from share_brand sb where sb.share_id = #{share_id} and sb.brand_id = #{brand_id}) order by sa.shareagentlevel_id
	</select>
	
	<select id="queryOneShareAgentLevelByShare" resultType="com.api.goods.entity.ShareQueryAgentLevel">
	    select sa.shareagentlevel_id,sa.agentlevel_id,a.agentlevel_name from share_agentlevel sa,agentlevel a where sa.agentlevel_id = a.agentlevel_id and sa.state = 1 and a.state = 1 and sa.sharebrand_id in (select sb.sharebrand_id from share_brand sb where sb.share_id = #{share_id} and sb.brand_id = #{brand_id}) and sa.agentlevel_id = #{agentlevel_id} order by sa.shareagentlevel_id
	</select>
	
	<select id="queryShareUse" parameterType="Integer" resultType="com.api.goods.entity.ShareQuery">
	   select s.share_id,s.account_id from share_use su,share s where su.share_id = s.share_id and su.state = 1 and s.state = 1 and su.account_id = #{account_id}
	</select>
	
	<select id="checkShareUse" parameterType="com.api.goods.entity.ShareUse" resultType="int">
	    select count(*) from share_use where share_id = #{share_id} and account_id = #{account_id} and state != 0;
	</select>
	
	<select id="checkShareNoUse" parameterType="com.api.goods.entity.ShareUse" resultType="int">
	    select count(*) from share_use where share_id = #{share_id} and account_id = #{account_id} and state = 1;
	</select>
	
	<update id="deleteAllShareUse" parameterType="Integer">
		update share_use set state = 0,update_time = now() where state = 1 and account_id = #{account_id}
	</update>

	<update id="deleteShareUse" parameterType="com.api.goods.entity.ShareUse">
		update share_use set state = 0,update_time = now() where state = 1 and share_id = #{share_id} and account_id = #{account_id}
	</update>
	
	<update id="downloadShareUse" parameterType="com.api.goods.entity.ShareUse">
		update share_use set state = 2,update_time = now() where state = 1 and share_id = #{share_id} and account_id = #{account_id}
	</update>
	
	<select id="checkExchangeCode" resultType="int">
	    select count(*) from brand where state = 1 and brand_id = #{brand_id} and brand_downloadcode = #{code} 
	</select>
	
	<select id="queryAllHotBrand" resultType="String">
		select brand_name from brandhot where state = 1
	</select>
	
	<select id="queryNowdate" resultType="String">
		select date_format(now(), '%Y%m') as nowtime 
	</select>

	<select id="queryBrandGoods" parameterType="com.api.goods.entity.Brand" resultType="com.api.goods.entity.BrandGoodsInfo">
		select count(1) as goodsCates,
  			   sum(goods_price*goods_stock) as stockPrice,
  			   sum(goods_stock) as goodsNum,
			   b.stock_remind as stockRemind
		from goods g join brand b
		on g.brand_id = b.brand_id
		where b.state = 1
		and b.account_id = #{account_id} and b.brand_id = #{brand_id}
		order by goods_index,goods_id
	</select>

	<update id="setBrandStockRemain" parameterType="com.api.goods.entity.Brand">
		update brand set stock_remind = #{stock_remind} where brand_id = #{brand_id}
	</update>

	<select id="selectHotBrand" resultType="com.api.goods.entity.Brand">
		select * from brand where state = 1 and  brand_downloadcode is not null and is_hot = 1
	</select>

	<select id="getBrandInfo" parameterType="java.lang.Integer" resultType="com.api.goods.entity.Brand">
		SELECT * FROM brand WHERE state = 1 AND brand_id = #{id}
	</select>

</mapper>